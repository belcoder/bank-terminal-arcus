// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankTerminalArcusClient is the client API for BankTerminalArcus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankTerminalArcusClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
}

type bankTerminalArcusClient struct {
	cc grpc.ClientConnInterface
}

func NewBankTerminalArcusClient(cc grpc.ClientConnInterface) BankTerminalArcusClient {
	return &bankTerminalArcusClient{cc}
}

func (c *bankTerminalArcusClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/BankTerminalArcus/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankTerminalArcusServer is the server API for BankTerminalArcus service.
// All implementations must embed UnimplementedBankTerminalArcusServer
// for forward compatibility
type BankTerminalArcusServer interface {
	Run(context.Context, *RunRequest) (*RunResponse, error)
	mustEmbedUnimplementedBankTerminalArcusServer()
}

// UnimplementedBankTerminalArcusServer must be embedded to have forward compatible implementations.
type UnimplementedBankTerminalArcusServer struct {
}

func (UnimplementedBankTerminalArcusServer) Run(context.Context, *RunRequest) (*RunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedBankTerminalArcusServer) mustEmbedUnimplementedBankTerminalArcusServer() {}

// UnsafeBankTerminalArcusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankTerminalArcusServer will
// result in compilation errors.
type UnsafeBankTerminalArcusServer interface {
	mustEmbedUnimplementedBankTerminalArcusServer()
}

func RegisterBankTerminalArcusServer(s grpc.ServiceRegistrar, srv BankTerminalArcusServer) {
	s.RegisterService(&BankTerminalArcus_ServiceDesc, srv)
}

func _BankTerminalArcus_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankTerminalArcusServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BankTerminalArcus/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankTerminalArcusServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankTerminalArcus_ServiceDesc is the grpc.ServiceDesc for BankTerminalArcus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankTerminalArcus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BankTerminalArcus",
	HandlerType: (*BankTerminalArcusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _BankTerminalArcus_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: ".data/proto/bank-terminal-arcus.proto",
}
